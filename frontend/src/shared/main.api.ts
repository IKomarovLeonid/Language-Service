//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class HistoryClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
    this.http = http ? http : window as any;
    this.baseUrl = baseUrl ?? "http://localhost:8080";
  }

  getAttempts(): Promise<PageViewModelOfAttemptHistoryModel> {
    let url_ = this.baseUrl + "/api/history";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetAttempts(_response);
    });
  }

  protected processGetAttempts(response: Response): Promise<PageViewModelOfAttemptHistoryModel> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PageViewModelOfAttemptHistoryModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<PageViewModelOfAttemptHistoryModel>(null as any);
  }

  createAttemptHistory(request: CreateAttemptHistoryRequestModel): Promise<FileResponse> {
    let url_ = this.baseUrl + "/api/history";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(request);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/octet-stream"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreateAttemptHistory(_response);
    });
  }

  protected processCreateAttemptHistory(response: Response): Promise<FileResponse> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
      let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
        fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      }
      return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<FileResponse>(null as any);
  }
}

export class WordsClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
    this.http = http ? http : window as any;
    this.baseUrl = baseUrl ?? "http://localhost:8080";
  }

  getWords(): Promise<PageViewModelOfWordModel> {
    let url_ = this.baseUrl + "/api/words";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetWords(_response);
    });
  }

  protected processGetWords(response: Response): Promise<PageViewModelOfWordModel> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PageViewModelOfWordModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<PageViewModelOfWordModel>(null as any);
  }

  addWord(): Promise<FileResponse> {
    let url_ = this.baseUrl + "/api/words";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "POST",
      headers: {
        "Accept": "application/octet-stream"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processAddWord(_response);
    });
  }

  protected processAddWord(response: Response): Promise<FileResponse> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
      let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
        fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      }
      return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<FileResponse>(null as any);
  }

  updateWord(): Promise<FileResponse> {
    let url_ = this.baseUrl + "/api/words";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "PATCH",
      headers: {
        "Accept": "application/octet-stream"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUpdateWord(_response);
    });
  }

  protected processUpdateWord(response: Response): Promise<FileResponse> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
      let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
        fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      }
      return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<FileResponse>(null as any);
  }
}

export class PageViewModelOfAttemptHistoryModel implements IPageViewModelOfAttemptHistoryModel {
  items?: AttemptHistoryModel[] | undefined;
  count?: number;

  constructor(data?: IPageViewModelOfAttemptHistoryModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(AttemptHistoryModel.fromJS(item));
      }
      this.count = _data["count"];
    }
  }

  static fromJS(data: any): PageViewModelOfAttemptHistoryModel {
    data = typeof data === 'object' ? data : {};
    let result = new PageViewModelOfAttemptHistoryModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items)
        data["items"].push(item.toJSON());
    }
    data["count"] = this.count;
    return data;
  }
}

export interface IPageViewModelOfAttemptHistoryModel {
  items?: AttemptHistoryModel[] | undefined;
  count?: number;
}

export class AttemptHistoryModel implements IAttemptHistoryModel {
  id?: number;
  userId?: number;
  attemptsTotal?: number;
  correctAttempts?: number;
  errorsTotal?: number;
  totalSeconds?: number;
  successRate?: number;
  avgAnswerTimeSec?: number;
  wordTypes?: WordType;
  category?: WordCategory;
  attempts?: AttemptModel[] | undefined;
  errors?: { [key: string]: number; } | undefined;
  createdTime?: Date;
  updatedTime?: Date;

  constructor(data?: IAttemptHistoryModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.userId = _data["userId"];
      this.attemptsTotal = _data["attemptsTotal"];
      this.correctAttempts = _data["correctAttempts"];
      this.errorsTotal = _data["errorsTotal"];
      this.totalSeconds = _data["totalSeconds"];
      this.successRate = _data["successRate"];
      this.avgAnswerTimeSec = _data["avgAnswerTimeSec"];
      this.wordTypes = _data["wordTypes"];
      this.category = _data["category"];
      if (Array.isArray(_data["attempts"])) {
        this.attempts = [] as any;
        for (let item of _data["attempts"])
          this.attempts!.push(AttemptModel.fromJS(item));
      }
      if (_data["errors"]) {
        this.errors = {} as any;
        for (let key in _data["errors"]) {
          if (_data["errors"].hasOwnProperty(key))
            (<any>this.errors)![key] = _data["errors"][key];
        }
      }
      this.createdTime = _data["createdTime"] ? new Date(_data["createdTime"].toString()) : <any>undefined;
      this.updatedTime = _data["updatedTime"] ? new Date(_data["updatedTime"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): AttemptHistoryModel {
    data = typeof data === 'object' ? data : {};
    let result = new AttemptHistoryModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["userId"] = this.userId;
    data["attemptsTotal"] = this.attemptsTotal;
    data["correctAttempts"] = this.correctAttempts;
    data["errorsTotal"] = this.errorsTotal;
    data["totalSeconds"] = this.totalSeconds;
    data["successRate"] = this.successRate;
    data["avgAnswerTimeSec"] = this.avgAnswerTimeSec;
    data["wordTypes"] = this.wordTypes;
    data["category"] = this.category;
    if (Array.isArray(this.attempts)) {
      data["attempts"] = [];
      for (let item of this.attempts)
        data["attempts"].push(item.toJSON());
    }
    if (this.errors) {
      data["errors"] = {};
      for (let key in this.errors) {
        if (this.errors.hasOwnProperty(key))
          (<any>data["errors"])[key] = (<any>this.errors)[key];
      }
    }
    data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
    data["updatedTime"] = this.updatedTime ? this.updatedTime.toISOString() : <any>undefined;
    return data;
  }
}

export interface IAttemptHistoryModel {
  id?: number;
  userId?: number;
  attemptsTotal?: number;
  correctAttempts?: number;
  errorsTotal?: number;
  totalSeconds?: number;
  successRate?: number;
  avgAnswerTimeSec?: number;
  wordTypes?: WordType;
  category?: WordCategory;
  attempts?: AttemptModel[] | undefined;
  errors?: { [key: string]: number; } | undefined;
  createdTime?: Date;
  updatedTime?: Date;
}

export enum WordType {
  Any = "Any",
  Noun = "Noun",
  Verb = "Verb",
  Adjective = "Adjective",
  Adverb = "Adverb",
  Preposition = "Preposition",
}

export enum WordCategory {
  Any = "Any",
  Time = "Time",
  Directions = "Directions",
  Colors = "Colors",
  Character = "Character",
  Family = "Family",
  Food = "Food",
  House = "House",
  Human = "Human",
  Office = "Office",
}

export class AttemptModel implements IAttemptModel {
  word?: string | undefined;
  userTranslation?: string | undefined;
  expectedTranslations?: string[] | undefined;
  totalSeconds?: number;
  isCorrect?: boolean;

  constructor(data?: IAttemptModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.word = _data["word"];
      this.userTranslation = _data["userTranslation"];
      if (Array.isArray(_data["expectedTranslations"])) {
        this.expectedTranslations = [] as any;
        for (let item of _data["expectedTranslations"])
          this.expectedTranslations!.push(item);
      }
      this.totalSeconds = _data["totalSeconds"];
      this.isCorrect = _data["isCorrect"];
    }
  }

  static fromJS(data: any): AttemptModel {
    data = typeof data === 'object' ? data : {};
    let result = new AttemptModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["word"] = this.word;
    data["userTranslation"] = this.userTranslation;
    if (Array.isArray(this.expectedTranslations)) {
      data["expectedTranslations"] = [];
      for (let item of this.expectedTranslations)
        data["expectedTranslations"].push(item);
    }
    data["totalSeconds"] = this.totalSeconds;
    data["isCorrect"] = this.isCorrect;
    return data;
  }
}

export interface IAttemptModel {
  word?: string | undefined;
  userTranslation?: string | undefined;
  expectedTranslations?: string[] | undefined;
  totalSeconds?: number;
  isCorrect?: boolean;
}

export class CreateAttemptHistoryRequestModel implements ICreateAttemptHistoryRequestModel {
  totalAttempts?: number;
  correctAttempts?: number;
  totalSeconds?: number;
  attempts?: AttemptModel[] | undefined;
  wordTypes?: WordType | undefined;
  category?: WordCategory | undefined;

  constructor(data?: ICreateAttemptHistoryRequestModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.totalAttempts = _data["totalAttempts"];
      this.correctAttempts = _data["correctAttempts"];
      this.totalSeconds = _data["totalSeconds"];
      if (Array.isArray(_data["attempts"])) {
        this.attempts = [] as any;
        for (let item of _data["attempts"])
          this.attempts!.push(AttemptModel.fromJS(item));
      }
      this.wordTypes = _data["wordTypes"];
      this.category = _data["category"];
    }
  }

  static fromJS(data: any): CreateAttemptHistoryRequestModel {
    data = typeof data === 'object' ? data : {};
    let result = new CreateAttemptHistoryRequestModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["totalAttempts"] = this.totalAttempts;
    data["correctAttempts"] = this.correctAttempts;
    data["totalSeconds"] = this.totalSeconds;
    if (Array.isArray(this.attempts)) {
      data["attempts"] = [];
      for (let item of this.attempts)
        data["attempts"].push(item.toJSON());
    }
    data["wordTypes"] = this.wordTypes;
    data["category"] = this.category;
    return data;
  }
}

export interface ICreateAttemptHistoryRequestModel {
  totalAttempts?: number;
  correctAttempts?: number;
  totalSeconds?: number;
  attempts?: AttemptModel[] | undefined;
  wordTypes?: WordType | undefined;
  category?: WordCategory | undefined;
}

export class PageViewModelOfWordModel implements IPageViewModelOfWordModel {
  items?: WordModel[] | undefined;
  count?: number;

  constructor(data?: IPageViewModelOfWordModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(WordModel.fromJS(item));
      }
      this.count = _data["count"];
    }
  }

  static fromJS(data: any): PageViewModelOfWordModel {
    data = typeof data === 'object' ? data : {};
    let result = new PageViewModelOfWordModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items)
        data["items"].push(item.toJSON());
    }
    data["count"] = this.count;
    return data;
  }
}

export interface IPageViewModelOfWordModel {
  items?: WordModel[] | undefined;
  count?: number;
}

export class WordModel implements IWordModel {
  id?: number;
  type?: WordType;
  category?: WordCategory;
  languageFrom?: LanguageType;
  languageTo?: LanguageType;
  word?: string | undefined;
  translations?: string[] | undefined;
  createdTime?: Date;
  updatedTime?: Date;

  constructor(data?: IWordModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.type = _data["type"];
      this.category = _data["category"];
      this.languageFrom = _data["languageFrom"];
      this.languageTo = _data["languageTo"];
      this.word = _data["word"];
      if (Array.isArray(_data["translations"])) {
        this.translations = [] as any;
        for (let item of _data["translations"])
          this.translations!.push(item);
      }
      this.createdTime = _data["createdTime"] ? new Date(_data["createdTime"].toString()) : <any>undefined;
      this.updatedTime = _data["updatedTime"] ? new Date(_data["updatedTime"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): WordModel {
    data = typeof data === 'object' ? data : {};
    let result = new WordModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["type"] = this.type;
    data["category"] = this.category;
    data["languageFrom"] = this.languageFrom;
    data["languageTo"] = this.languageTo;
    data["word"] = this.word;
    if (Array.isArray(this.translations)) {
      data["translations"] = [];
      for (let item of this.translations)
        data["translations"].push(item);
    }
    data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
    data["updatedTime"] = this.updatedTime ? this.updatedTime.toISOString() : <any>undefined;
    return data;
  }
}

export interface IWordModel {
  id?: number;
  type?: WordType;
  category?: WordCategory;
  languageFrom?: LanguageType;
  languageTo?: LanguageType;
  word?: string | undefined;
  translations?: string[] | undefined;
  createdTime?: Date;
  updatedTime?: Date;
}

export enum LanguageType {
  Undefined = "Undefined",
  Spanish = "Spanish",
  Russian = "Russian",
}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: { [name: string]: any };
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  if (result !== null && result !== undefined)
    throw result;
  else
    throw new ApiException(message, status, response, headers, null);
}
