//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class WordsClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
    this.http = http ? http : window as any;
    this.baseUrl = baseUrl ?? "http://localhost:8080";
  }

  getWords(queryBy: string | null | undefined): Promise<PageViewModelOfWordModel> {
    let url_ = this.baseUrl + "/api/words?";
    if (queryBy !== undefined && queryBy !== null)
      url_ += "queryBy=" + encodeURIComponent("" + queryBy) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetWords(_response);
    });
  }

  protected processGetWords(response: Response): Promise<PageViewModelOfWordModel> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PageViewModelOfWordModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<PageViewModelOfWordModel>(null as any);
  }

  getWordStatistics(userId: number | null | undefined): Promise<PageViewModelOfWordStatisticsModel> {
    let url_ = this.baseUrl + "/api/words/statistics?";
    if (userId !== undefined && userId !== null)
      url_ += "userId=" + encodeURIComponent("" + userId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetWordStatistics(_response);
    });
  }

  protected processGetWordStatistics(response: Response): Promise<PageViewModelOfWordStatisticsModel> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PageViewModelOfWordStatisticsModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<PageViewModelOfWordStatisticsModel>(null as any);
  }
}

export class GameClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
    this.http = http ? http : window as any;
    this.baseUrl = baseUrl ?? "http://localhost:8080";
  }

  createGameResult(request: CreateGameResultRequestModel): Promise<FileResponse> {
    let url_ = this.baseUrl + "/api/game";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(request);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/octet-stream"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processCreateGameResult(_response);
    });
  }

  protected processCreateGameResult(response: Response): Promise<FileResponse> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
      let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
        fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      }
      return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<FileResponse>(null as any);
  }

  getGames(userId: number | null | undefined): Promise<PageViewModelOfGameAttemptModel> {
    let url_ = this.baseUrl + "/api/game?";
    if (userId !== undefined && userId !== null)
      url_ += "userId=" + encodeURIComponent("" + userId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetGames(_response);
    });
  }

  protected processGetGames(response: Response): Promise<PageViewModelOfGameAttemptModel> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = PageViewModelOfGameAttemptModel.fromJS(resultData200);
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<PageViewModelOfGameAttemptModel>(null as any);
  }
}

export class UsersClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
    this.http = http ? http : window as any;
    this.baseUrl = baseUrl ?? "http://localhost:8080";
  }

  registerUser(request: RegisterUserRequestModel): Promise<FileResponse> {
    let url_ = this.baseUrl + "/api/users";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(request);

    let options_: RequestInit = {
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/octet-stream"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processRegisterUser(_response);
    });
  }

  protected processRegisterUser(response: Response): Promise<FileResponse> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200 || status === 206) {
      const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
      let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
      let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
      if (fileName) {
        fileName = decodeURIComponent(fileName);
      } else {
        fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
        fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
      }
      return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<FileResponse>(null as any);
  }

  getUsers(id: number | undefined): Promise<UserModel[]> {
    let url_ = this.baseUrl + "/api/users?";
    if (id === null)
      throw new Error("The parameter 'id' cannot be null.");
    else if (id !== undefined)
      url_ += "id=" + encodeURIComponent("" + id) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetUsers(_response);
    });
  }

  protected processGetUsers(response: Response): Promise<UserModel[]> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(UserModel.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<UserModel[]>(null as any);
  }
}

export class PageViewModelOfWordModel implements IPageViewModelOfWordModel {
  items?: WordModel[] | undefined;
  count?: number;

  constructor(data?: IPageViewModelOfWordModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(WordModel.fromJS(item));
      }
      this.count = _data["count"];
    }
  }

  static fromJS(data: any): PageViewModelOfWordModel {
    data = typeof data === 'object' ? data : {};
    let result = new PageViewModelOfWordModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items)
        data["items"].push(item.toJSON());
    }
    data["count"] = this.count;
    return data;
  }
}

export interface IPageViewModelOfWordModel {
  items?: WordModel[] | undefined;
  count?: number;
}

export class WordModel implements IWordModel {
  id?: number;
  attributes?: string | undefined;
  word?: string | undefined;
  conjugation?: string | undefined;
  wordRating?: number;
  totalAttempts?: number;
  successRate?: number;
  translations?: string[] | undefined;
  languageType?: WordLanguageType;
  createdTime?: Date;
  updatedTime?: Date;

  constructor(data?: IWordModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.attributes = _data["attributes"];
      this.word = _data["word"];
      this.conjugation = _data["conjugation"];
      this.wordRating = _data["wordRating"];
      this.totalAttempts = _data["totalAttempts"];
      this.successRate = _data["successRate"];
      if (Array.isArray(_data["translations"])) {
        this.translations = [] as any;
        for (let item of _data["translations"])
          this.translations!.push(item);
      }
      this.languageType = _data["languageType"];
      this.createdTime = _data["createdTime"] ? new Date(_data["createdTime"].toString()) : <any>undefined;
      this.updatedTime = _data["updatedTime"] ? new Date(_data["updatedTime"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): WordModel {
    data = typeof data === 'object' ? data : {};
    let result = new WordModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["attributes"] = this.attributes;
    data["word"] = this.word;
    data["conjugation"] = this.conjugation;
    data["wordRating"] = this.wordRating;
    data["totalAttempts"] = this.totalAttempts;
    data["successRate"] = this.successRate;
    if (Array.isArray(this.translations)) {
      data["translations"] = [];
      for (let item of this.translations)
        data["translations"].push(item);
    }
    data["languageType"] = this.languageType;
    data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
    data["updatedTime"] = this.updatedTime ? this.updatedTime.toISOString() : <any>undefined;
    return data;
  }
}

export interface IWordModel {
  id?: number;
  attributes?: string | undefined;
  word?: string | undefined;
  conjugation?: string | undefined;
  wordRating?: number;
  totalAttempts?: number;
  successRate?: number;
  translations?: string[] | undefined;
  languageType?: WordLanguageType;
  createdTime?: Date;
  updatedTime?: Date;
}

export enum WordLanguageType {
  SpanishRussian = "SpanishRussian",
  EnglishRussian = "EnglishRussian",
}

export class PageViewModelOfWordStatisticsModel implements IPageViewModelOfWordStatisticsModel {
  items?: WordStatisticsModel[] | undefined;
  count?: number;

  constructor(data?: IPageViewModelOfWordStatisticsModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(WordStatisticsModel.fromJS(item));
      }
      this.count = _data["count"];
    }
  }

  static fromJS(data: any): PageViewModelOfWordStatisticsModel {
    data = typeof data === 'object' ? data : {};
    let result = new PageViewModelOfWordStatisticsModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items)
        data["items"].push(item.toJSON());
    }
    data["count"] = this.count;
    return data;
  }
}

export interface IPageViewModelOfWordStatisticsModel {
  items?: WordStatisticsModel[] | undefined;
  count?: number;
}

export class WordStatisticsModel implements IWordStatisticsModel {
  id?: number;
  userId?: number | undefined;
  wordId?: number;
  correctAnswersTotal?: number;
  totalAnswersCount?: number;
  successRate?: number;
  updatedTime?: Date;

  constructor(data?: IWordStatisticsModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.userId = _data["userId"];
      this.wordId = _data["wordId"];
      this.correctAnswersTotal = _data["correctAnswersTotal"];
      this.totalAnswersCount = _data["totalAnswersCount"];
      this.successRate = _data["successRate"];
      this.updatedTime = _data["updatedTime"] ? new Date(_data["updatedTime"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): WordStatisticsModel {
    data = typeof data === 'object' ? data : {};
    let result = new WordStatisticsModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["userId"] = this.userId;
    data["wordId"] = this.wordId;
    data["correctAnswersTotal"] = this.correctAnswersTotal;
    data["totalAnswersCount"] = this.totalAnswersCount;
    data["successRate"] = this.successRate;
    data["updatedTime"] = this.updatedTime ? this.updatedTime.toISOString() : <any>undefined;
    return data;
  }
}

export interface IWordStatisticsModel {
  id?: number;
  userId?: number | undefined;
  wordId?: number;
  correctAnswersTotal?: number;
  totalAnswersCount?: number;
  successRate?: number;
  updatedTime?: Date;
}

export class CreateGameResultRequestModel implements ICreateGameResultRequestModel {
  userId?: number;
  results?: WordGameResultModel[] | undefined;

  constructor(data?: ICreateGameResultRequestModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data["userId"];
      if (Array.isArray(_data["results"])) {
        this.results = [] as any;
        for (let item of _data["results"])
          this.results!.push(WordGameResultModel.fromJS(item));
      }
    }
  }

  static fromJS(data: any): CreateGameResultRequestModel {
    data = typeof data === 'object' ? data : {};
    let result = new CreateGameResultRequestModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userId"] = this.userId;
    if (Array.isArray(this.results)) {
      data["results"] = [];
      for (let item of this.results)
        data["results"].push(item.toJSON());
    }
    return data;
  }
}

export interface ICreateGameResultRequestModel {
  userId?: number;
  results?: WordGameResultModel[] | undefined;
}

export class WordGameResultModel implements IWordGameResultModel {
  wordId?: number;
  correctCount?: number;
  wrongCount?: number;

  constructor(data?: IWordGameResultModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.wordId = _data["wordId"];
      this.correctCount = _data["correctCount"];
      this.wrongCount = _data["wrongCount"];
    }
  }

  static fromJS(data: any): WordGameResultModel {
    data = typeof data === 'object' ? data : {};
    let result = new WordGameResultModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["wordId"] = this.wordId;
    data["correctCount"] = this.correctCount;
    data["wrongCount"] = this.wrongCount;
    return data;
  }
}

export interface IWordGameResultModel {
  wordId?: number;
  correctCount?: number;
  wrongCount?: number;
}

export class PageViewModelOfGameAttemptModel implements IPageViewModelOfGameAttemptModel {
  items?: GameAttemptModel[] | undefined;
  count?: number;

  constructor(data?: IPageViewModelOfGameAttemptModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["items"])) {
        this.items = [] as any;
        for (let item of _data["items"])
          this.items!.push(GameAttemptModel.fromJS(item));
      }
      this.count = _data["count"];
    }
  }

  static fromJS(data: any): PageViewModelOfGameAttemptModel {
    data = typeof data === 'object' ? data : {};
    let result = new PageViewModelOfGameAttemptModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.items)) {
      data["items"] = [];
      for (let item of this.items)
        data["items"].push(item.toJSON());
    }
    data["count"] = this.count;
    return data;
  }
}

export interface IPageViewModelOfGameAttemptModel {
  items?: GameAttemptModel[] | undefined;
  count?: number;
}

export class GameAttemptModel implements IGameAttemptModel {
  id?: number;
  userId?: number;
  userRatingChange?: number;
  totalAnswers?: number;
  errorAnswers?: number;
  successRate?: number;
  updatedTime?: Date;

  constructor(data?: IGameAttemptModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.userId = _data["userId"];
      this.userRatingChange = _data["userRatingChange"];
      this.totalAnswers = _data["totalAnswers"];
      this.errorAnswers = _data["errorAnswers"];
      this.successRate = _data["successRate"];
      this.updatedTime = _data["updatedTime"] ? new Date(_data["updatedTime"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): GameAttemptModel {
    data = typeof data === 'object' ? data : {};
    let result = new GameAttemptModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["userId"] = this.userId;
    data["userRatingChange"] = this.userRatingChange;
    data["totalAnswers"] = this.totalAnswers;
    data["errorAnswers"] = this.errorAnswers;
    data["successRate"] = this.successRate;
    data["updatedTime"] = this.updatedTime ? this.updatedTime.toISOString() : <any>undefined;
    return data;
  }
}

export interface IGameAttemptModel {
  id?: number;
  userId?: number;
  userRatingChange?: number;
  totalAnswers?: number;
  errorAnswers?: number;
  successRate?: number;
  updatedTime?: Date;
}

export class RegisterUserRequestModel implements IRegisterUserRequestModel {

  constructor(data?: IRegisterUserRequestModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
  }

  static fromJS(data: any): RegisterUserRequestModel {
    data = typeof data === 'object' ? data : {};
    let result = new RegisterUserRequestModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    return data;
  }
}

export interface IRegisterUserRequestModel {
}

export class UserModel implements IUserModel {
  id?: number;
  isAdmin?: boolean;
  email?: string | undefined;
  userName?: string | undefined;
  userRating?: number;
  successPercent?: number;
  createdTime?: Date;
  updatedTime?: Date;

  constructor(data?: IUserModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.isAdmin = _data["isAdmin"];
      this.email = _data["email"];
      this.userName = _data["userName"];
      this.userRating = _data["userRating"];
      this.successPercent = _data["successPercent"];
      this.createdTime = _data["createdTime"] ? new Date(_data["createdTime"].toString()) : <any>undefined;
      this.updatedTime = _data["updatedTime"] ? new Date(_data["updatedTime"].toString()) : <any>undefined;
    }
  }

  static fromJS(data: any): UserModel {
    data = typeof data === 'object' ? data : {};
    let result = new UserModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["isAdmin"] = this.isAdmin;
    data["email"] = this.email;
    data["userName"] = this.userName;
    data["userRating"] = this.userRating;
    data["successPercent"] = this.successPercent;
    data["createdTime"] = this.createdTime ? this.createdTime.toISOString() : <any>undefined;
    data["updatedTime"] = this.updatedTime ? this.updatedTime.toISOString() : <any>undefined;
    return data;
  }
}

export interface IUserModel {
  id?: number;
  isAdmin?: boolean;
  email?: string | undefined;
  userName?: string | undefined;
  userRating?: number;
  successPercent?: number;
  createdTime?: Date;
  updatedTime?: Date;
}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: { [name: string]: any };
}

export class ApiException extends Error {
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  if (result !== null && result !== undefined)
    throw result;
  else
    throw new ApiException(message, status, response, headers, null);
}
